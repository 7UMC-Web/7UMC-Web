{"ast":null,"code":"var _jsxFileName = \"/Users/yangjeong-u/GitHub/7UMC-Web/week6/jeongwoo/practice/src/context/TodoContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState } from 'react';\n\n// Context 생성\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TodoContext = /*#__PURE__*/createContext();\n\n// Provider 컴포넌트 생성\nexport const TodoProvider = ({\n  children\n}) => {\n  _s();\n  // 모든 상태값들을 Context로 이동\n  const [todos, setTodos] = useState([]);\n  const [input, setInput] = useState('');\n  const [editId, setEditId] = useState(null);\n  const [editText, setEditText] = useState('');\n\n  // Todo 추가 함수\n  const addTodo = () => {\n    if (input.trim() !== '') {\n      setTodos([...todos, {\n        id: todos.length + 1,\n        text: input\n      }]);\n      setInput('');\n    }\n  };\n\n  // Todo 삭제 함수\n  const deleteTodo = id => {\n    setTodos(todos.filter(todo => todo.id !== id));\n  };\n\n  // 수정 모드 시작 함수\n  const startEdit = (id, text) => {\n    setEditId(id);\n    setEditText(text);\n  };\n\n  // 수정 내용 저장 함수\n  const saveEdit = () => {\n    setTodos(todos.map(todo => todo.id === editId ? {\n      ...todo,\n      text: editText\n    } : todo));\n    setEditId(null);\n  };\n  return /*#__PURE__*/_jsxDEV(TodoContext.Provider, {\n    value: {\n      todos,\n      input,\n      editId,\n      editText,\n      setInput,\n      setEditText,\n      addTodo,\n      deleteTodo,\n      startEdit,\n      saveEdit\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n\n// 커스텀 훅 생성\n_s(TodoProvider, \"G6mY4p8t/2JuWI6I3YnUNPQFwEI=\");\n_c = TodoProvider;\nexport const useTodo = () => {\n  _s2();\n  const context = useContext(TodoContext);\n  if (!context) {\n    throw new Error('useTodo must be used within a TodoProvider');\n  }\n  return context;\n};\n_s2(useTodo, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"TodoProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","jsxDEV","_jsxDEV","TodoContext","TodoProvider","children","_s","todos","setTodos","input","setInput","editId","setEditId","editText","setEditText","addTodo","trim","id","length","text","deleteTodo","filter","todo","startEdit","saveEdit","map","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useTodo","_s2","context","Error","$RefreshReg$"],"sources":["/Users/yangjeong-u/GitHub/7UMC-Web/week6/jeongwoo/practice/src/context/TodoContext.js"],"sourcesContent":["import React, { createContext, useContext, useState } from 'react';\n\n// Context 생성\nconst TodoContext = createContext();\n\n// Provider 컴포넌트 생성\nexport const TodoProvider = ({ children }) => {\n  // 모든 상태값들을 Context로 이동\n  const [todos, setTodos] = useState([]);\n  const [input, setInput] = useState('');\n  const [editId, setEditId] = useState(null);\n  const [editText, setEditText] = useState('');\n\n  // Todo 추가 함수\n  const addTodo = () => {\n    if (input.trim() !== '') {\n      setTodos([...todos, { id: todos.length + 1, text: input }]);\n      setInput('');\n    }\n  };\n\n  // Todo 삭제 함수\n  const deleteTodo = (id) => {\n    setTodos(todos.filter(todo => todo.id !== id));\n  };\n\n  // 수정 모드 시작 함수\n  const startEdit = (id, text) => {\n    setEditId(id);\n    setEditText(text);\n  };\n\n  // 수정 내용 저장 함수\n  const saveEdit = () => {\n    setTodos(todos.map(todo => \n      todo.id === editId ? { ...todo, text: editText } : todo\n    ));\n    setEditId(null);\n  };\n\n  return (\n    <TodoContext.Provider value={{\n      todos,\n      input,\n      editId,\n      editText,\n      setInput,\n      setEditText,\n      addTodo,\n      deleteTodo,\n      startEdit,\n      saveEdit\n    }}>\n      {children}\n    </TodoContext.Provider>\n  );\n};\n\n// 커스텀 훅 생성\nexport const useTodo = () => {\n  const context = useContext(TodoContext);\n  if (!context) {\n    throw new Error('useTodo must be used within a TodoProvider');\n  }\n  return context;\n};"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,QAAQ,OAAO;;AAElE;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,WAAW,gBAAGL,aAAa,CAAC,CAAC;;AAEnC;AACA,OAAO,MAAMM,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C;EACA,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACW,MAAM,EAAEC,SAAS,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAC1C,MAAM,CAACa,QAAQ,EAAEC,WAAW,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;;EAE5C;EACA,MAAMe,OAAO,GAAGA,CAAA,KAAM;IACpB,IAAIN,KAAK,CAACO,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;MACvBR,QAAQ,CAAC,CAAC,GAAGD,KAAK,EAAE;QAAEU,EAAE,EAAEV,KAAK,CAACW,MAAM,GAAG,CAAC;QAAEC,IAAI,EAAEV;MAAM,CAAC,CAAC,CAAC;MAC3DC,QAAQ,CAAC,EAAE,CAAC;IACd;EACF,CAAC;;EAED;EACA,MAAMU,UAAU,GAAIH,EAAE,IAAK;IACzBT,QAAQ,CAACD,KAAK,CAACc,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACL,EAAE,KAAKA,EAAE,CAAC,CAAC;EAChD,CAAC;;EAED;EACA,MAAMM,SAAS,GAAGA,CAACN,EAAE,EAAEE,IAAI,KAAK;IAC9BP,SAAS,CAACK,EAAE,CAAC;IACbH,WAAW,CAACK,IAAI,CAAC;EACnB,CAAC;;EAED;EACA,MAAMK,QAAQ,GAAGA,CAAA,KAAM;IACrBhB,QAAQ,CAACD,KAAK,CAACkB,GAAG,CAACH,IAAI,IACrBA,IAAI,CAACL,EAAE,KAAKN,MAAM,GAAG;MAAE,GAAGW,IAAI;MAAEH,IAAI,EAAEN;IAAS,CAAC,GAAGS,IACrD,CAAC,CAAC;IACFV,SAAS,CAAC,IAAI,CAAC;EACjB,CAAC;EAED,oBACEV,OAAA,CAACC,WAAW,CAACuB,QAAQ;IAACC,KAAK,EAAE;MAC3BpB,KAAK;MACLE,KAAK;MACLE,MAAM;MACNE,QAAQ;MACRH,QAAQ;MACRI,WAAW;MACXC,OAAO;MACPK,UAAU;MACVG,SAAS;MACTC;IACF,CAAE;IAAAnB,QAAA,EACCA;EAAQ;IAAAuB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;;AAED;AAAAzB,EAAA,CApDaF,YAAY;AAAA4B,EAAA,GAAZ5B,YAAY;AAqDzB,OAAO,MAAM6B,OAAO,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC3B,MAAMC,OAAO,GAAGpC,UAAU,CAACI,WAAW,CAAC;EACvC,IAAI,CAACgC,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,4CAA4C,CAAC;EAC/D;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,GAAA,CANWD,OAAO;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}